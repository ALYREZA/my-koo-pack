---
globs: *.svelte,src/lib/**
---

# Component Development Patterns

## Component Library Structure
- **Reusable components**: Store in `src/lib/components/`
- **Utilities**: Store in `src/lib/utils/`
- **Types**: Store in `src/lib/types/`
- **Assets**: Store in `src/lib/assets/`

## Component Design Patterns
```svelte
<!-- Button Component Example -->
<script lang="ts">
  interface ButtonProps {
    variant?: 'primary' | 'secondary' | 'ghost';
    size?: 'sm' | 'md' | 'lg';
    disabled?: boolean;
    href?: string;
    type?: 'button' | 'submit' | 'reset';
    class?: string;
    children: import('svelte').Snippet;
  }
  
  let { 
    variant = 'primary', 
    size = 'md', 
    disabled = false,
    href,
    type = 'button',
    class: className = '',
    children
  }: ButtonProps = $props();
  
  // Computed classes using Tailwind
  let classes = $derived(() => {
    const baseClasses = 'inline-flex items-center justify-center rounded-md font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2';
    
    const variants = {
      primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',
      secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500',
      ghost: 'text-gray-600 hover:bg-gray-100 focus:ring-gray-500'
    };
    
    const sizes = {
      sm: 'px-3 py-1.5 text-sm',
      md: 'px-4 py-2 text-base',
      lg: 'px-6 py-3 text-lg'
    };
    
    return `${baseClasses} ${variants[variant]} ${sizes[size]} ${className}`;
  });
</script>

{#if href}
  <a {href} class={classes} class:opacity-50={disabled} aria-disabled={disabled}>
    {@render children()}
  </a>
{:else}
  <button {type} {disabled} class={classes}>
    {@render children()}
  </button>
{/if}
```

## State Management Patterns
- Use `$state()` for local component state
- Use stores for global state that needs to persist
- Use `$derived()` for computed values
- Use `$effect()` for side effects and cleanup

## Accessibility Guidelines
- Always include proper ARIA attributes
- Use semantic HTML elements
- Ensure keyboard navigation works
- Add focus management for interactive components
- Test with screen readers

## Performance Patterns
- Use `{#key}` blocks to force re-rendering when needed
- Implement lazy loading for heavy components
- Use `$derived()` instead of reactive statements for better performance
- Minimize prop drilling with context when appropriate

## Testing Strategy
- Write component tests using Vitest and @testing-library/svelte
- Test user interactions and accessibility
- Mock external dependencies
- Test responsive behavior